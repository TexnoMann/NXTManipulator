#include "PIDControlJoint.nxc"

ManipulatorJoint joint1;
ManipulatorJoint joint2;
ManipulatorJoint joint3;

void jointInit(ManipulatorJoint _joint, byte _currentMotor,float _desiredSpeed, int _dt, float _lc, float _m);
float getJointMasCentrum(ManipulatorJoint _joint);
float getJointCurrentSpeed(ManipulatorJoint _joint);
float getJointCurrentAngle(ManipulatorJoint _joint);
byte getJointMotor(ManipulatorJoint _joint);
float getJointMOut(ManipulatorJoint _joint);
void setJointMasCentrum(ManipulatorJoint _joint,float _lc);
void setJointSpeed(ManipulatorJoint _joint, float _desiredSpeed);
void setJointMotor(ManipulatorJoint _joint, byte _currentMotor);
float setJointAngle(ManipulatorJoint _joint, float _desiredAngle);

void startJointPID(ManipulatorJoint _joint);
task onJoint_1();
task onJoint_2();
task onJoint_3();

void jointInit(ManipulatorJoint _joint, byte _currentMotor,float _desiredSpeed, int _dt, float _lc, float _m){
  _joint.currentMotor=_currentMotor;
  _joint.desiredSpeed=_desiredSpeed;
  _joint.dt= _dt;
  _joint.lc=_lc;
  _joint.m=_m;
}
/*
void startMoveJoint_1(){
  jointInit(joint1,OUT_A,1.0,40, 0.093,0.109);
  StartTask(onJoint_1);
}

void startMoveJoint_2(){
  jointInit(joint1,OUT_A,1.0,40, 0.093,0.109);
  StartTask(onJoint_2);
}

void startMoveJoint_3(){
  jointInit(joint1,OUT_A,1.0,40, 0.093,0.109);
  StartTask(onJoint_3;
}

*/





//==============================================================================
//GETTERS
float getJointMasCentrum(ManipulatorJoint _joint){
  return _joint.lc;
}

float getJointCurrentSpeed(ManipulatorJoint _joint){
  return _joint.secondSpeed;
}

float getJointCurrentAngle(ManipulatorJoint _joint){
  return _joint.secondAngle;
}

byte getJointMotor(ManipulatorJoint _joint){
  return _joint.currentMotor;
}

float getJointMOut(ManipulatorJoint _joint){
  return _joint.MOut;
}

//==============================================================================
//SETTERS
void setJointMasCentrum(ManipulatorJoint _joint,float _lc){
  _joint.lc=_lc;
}

void setJointSpeed(ManipulatorJoint _joint, float _desiredSpeed){
  _joint.desiredSpeed=_desiredSpeed;
}

byte setJointMotor(ManipulatorJoint _joint, byte _currentMotor){
  _joint.currentMotor=_currentMotor;
}

float setJointAngle(ManipulatorJoint _joint, float _desiredAngle){
  _joint.desiredAngle=_desiredAngle;
}

void startJointPID(int numberJoint){
  if(numberJoint==1) StartTask(onJoint_1);
  else if(numberJoint==2) StartTask(onJoint_2);
  else if(numberJoint==3) StartTask(onJoint_3);

}

task onJoint_1(){
  startJointPID(joint1);
}

task onJoint_2(){
  startJointPID(joint2);
}

task onJoint_3(){
  startJointPID(joint3);
}
